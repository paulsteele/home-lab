repositories:
- name: blog
  url: https://github.com/paulsteele/blog
argo-workflows:
  images:
    tag: "v3.3.9"
  controller:
    parallelism: 5
    serviceAccount:
      annotations:
  server:
    ingress:
      enabled: true
      ingressClassName: "nginx"
      hosts:
      - ci.paul-steele.com
      tls:
      - hosts:
        - ci.paul-steele.com
      annotations:
        external-dns.alpha.kubernetes.io/hostname: ci.paul-steele.com
        external-dns.alpha.kubernetes.io/target: paulsteelehome.duckdns.org
    extraArgs:
    - --auth-mode=sso
    - --auth-mode=client
    sso:
      issuer: https://oidc.paul-steele.com/auth/realms/master
      ## Name of a secret and a key in it to retrieve the app OIDC client ID from.
      clientId:
        name: argo-sso
        key: client-id
      ## Name of a secret and a key in it to retrieve the app OIDC client secret from.
      clientSecret:
        name: argo-sso
        key: client-secret
      ## The OIDC redirect URL. Should be in the form <argo-root-url>/oauth2/callback.
      redirectUrl: https://ci.paul-steele.com/oauth2/callback
      rbac:
        enabled: true
      ## When present, restricts secrets the server can read to a given list.
      ## You can use it to restrict the server to only be able to access the
      ## service account token secrets that are associated with service accounts
      ## used for authorization.
      #   secretWhitelist: []
      ## Scopes requested from the SSO ID provider.  The 'groups' scope requests
      ## group membership information, which is usually used for authorization
      ## decisions.
      scopes:
      - groups

